Save dir: results_dir/test_uni_v1_official_spatial_transformer::25-10-14-16-02-26
Namespace(seed=1, datasets=['READ'], use_wandb=True, source_dataroot='/root/data1/Reproduce/dataset/', embed_dataroot='/root/data1/Reproduce/dataset/embed_dataroot', gene_list='var_50genes.json', save_dir='results_dir/', feature_encoder='uni_v1_official', normalize_method='log1p', exp_code='test', device=0, sample_times=10, batch_size=2, lr=0.0005, epochs=100, clip_norm=1.0, save_step=-1, eval_step=1, num_workers=1, loss_func='mse', patch_distribution='uniform', n_genes=50, n_sample_steps=5, prior_sampler='zinb', zinb_logits=0.1, zinb_total_count=1, zinb_zi_logits=0.0, backbone='spatial_transformer', hidden_dim=128, pairwise_hidden_dim=128, n_layers=4, dropout=0.2, attn_dropout=0.2, n_neighbors=8, n_heads=4, feature_dim=1024, norm='layer', activation='swiglu')
Running dataset READ split 0
Dataset Loading
/root/data1/my_module/STFlow-source/stflow/flow/ZINB.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.total_count = torch.tensor(total_count, dtype=torch.float32)
/root/data1/my_module/STFlow-source/stflow/flow/ZINB.py:25: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.logits = torch.tensor(logits, dtype=torch.float32)
Training
  0%|                                                                       | 0/100 [00:01<?, ?it/s]
Traceback (most recent call last):
  File "/root/data1/STFlow-source/stflow/app/flow/train.py", line 257, in <module>
    run(args)
  File "/root/data1/STFlow-source/stflow/app/flow/train.py", line 165, in run
    results = main(args, i, train_sample_ids, test_sample_ids, kfold_save_dir, checkpoint_save_dir)
  File "/root/data1/STFlow-source/stflow/app/flow/train.py", line 85, in main
    noisy_exp, t_steps = diffusier.corrupt_exp(gene_exp)
  File "/root/data1/my_module/STFlow-source/stflow/flow/interpolant.py", line 112, in corrupt_exp
    exp_0 = self.sample_from_prior(exp.shape, img_features).to(self.device)
  File "/root/data1/my_module/STFlow-source/stflow/flow/interpolant.py", line 52, in sample_from_prior
    exp = self.prior_sampler.sample(shape).to(self.device)
  File "/root/data1/my_module/STFlow-source/stflow/flow/noise.py", line 54, in sample
    return self.prior_sampler(shape)
  File "/root/data1/my_module/STFlow-source/stflow/flow/noise.py", line 40, in <lambda>
    self.prior_sampler = lambda shape: prior_sampler.sample(shape).squeeze(-1)
  File "/root/data1/my_module/STFlow-source/stflow/flow/ZINB.py", line 49, in sample
    out = (1.0 - zero_mask) * nb_sample
RuntimeError: The size of tensor a (887) must match the size of tensor b (50) at non-singleton dimension 2
Traceback (most recent call last):
  File "/root/data1/STFlow-source/stflow/app/flow/train.py", line 257, in <module>
    run(args)
  File "/root/data1/STFlow-source/stflow/app/flow/train.py", line 165, in run
    results = main(args, i, train_sample_ids, test_sample_ids, kfold_save_dir, checkpoint_save_dir)
  File "/root/data1/STFlow-source/stflow/app/flow/train.py", line 85, in main
    noisy_exp, t_steps = diffusier.corrupt_exp(gene_exp)
  File "/root/data1/my_module/STFlow-source/stflow/flow/interpolant.py", line 112, in corrupt_exp
    exp_0 = self.sample_from_prior(exp.shape, img_features).to(self.device)
  File "/root/data1/my_module/STFlow-source/stflow/flow/interpolant.py", line 52, in sample_from_prior
    exp = self.prior_sampler.sample(shape).to(self.device)
  File "/root/data1/my_module/STFlow-source/stflow/flow/noise.py", line 54, in sample
    return self.prior_sampler(shape)
  File "/root/data1/my_module/STFlow-source/stflow/flow/noise.py", line 40, in <lambda>
    self.prior_sampler = lambda shape: prior_sampler.sample(shape).squeeze(-1)
  File "/root/data1/my_module/STFlow-source/stflow/flow/ZINB.py", line 49, in sample
    out = (1.0 - zero_mask) * nb_sample
RuntimeError: The size of tensor a (887) must match the size of tensor b (50) at non-singleton dimension 2
